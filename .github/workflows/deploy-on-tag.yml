name: Deploy on Tag

permissions:
  contents: read         # read repo contents
  packages: write        # write access to GHCR
  actions: read          # read workflow metadata

# Runs whenever you push a Git tag (e.g. v1.2.3 or 1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAMESPACE: premiertutors
      PACKAGE_NAME: 2_typst
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      IMAGE_TAG: ${{ github.ref_name }}
      # SSH settings for deploy
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Test GHCR write access
        run: |
          echo "FROM scratch" > Dockerfile.test
          docker build -f Dockerfile.test -t ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:access-test .
          docker push ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:access-test
          rm Dockerfile.test

      - name: Verify GHCR access
        run: |
          echo "🔍 Verifying GHCR access..."
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          
          # Test basic access to GHCR
          echo "Testing GHCR connectivity..."
          docker pull hello-world || echo "Basic Docker test completed"
          
          # Check if package exists
          echo "Checking if package exists..."
          if docker manifest inspect ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
            echo "✅ Package exists and is accessible"
          else
            echo "ℹ️ Package doesn't exist yet or no latest tag - this is normal for first push"
          fi

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: |
            ${{ secrets.REPO_B_SSH_KEY }}
            ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Add known hosts for GitHub
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Find latest package tag
        id: find_tag
        run: |
          echo "🔍 Finding latest package tag…"
          # Use SSH URL to list tags for private repo
          LATEST=$(git ls-remote --tags git@github.com:premiertutors/2_typst.git \
            | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
            | grep -E '^[0-9]+' \
            | sort -V \
            | tail -n1)
          if [ -z "$LATEST" ]; then
            echo "❌ No valid tags found"
            exit 1
          fi
          echo "✅ Latest package tag is: $LATEST"
          echo "LATEST_TAG=$LATEST" >> $GITHUB_ENV

      - name: Clone and checkout package repo
        run: |
          git clone git@github.com:premiertutors/2_typst.git package-repo
          git -C package-repo checkout $LATEST_TAG

      - name: Build & push HTTP-server
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "🔨 Building Docker image..."
          IMAGE_TAG="ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ env.IMAGE_TAG }}"
          echo "Image tag: $IMAGE_TAG"
          
          # Build the image
          docker build -f Dockerfile.http -t "$IMAGE_TAG" .
          
          # Push the image
          echo "📤 Pushing to GHCR..."
          docker push "$IMAGE_TAG"
          
          echo "✅ Successfully pushed $IMAGE_TAG"

      - name: Verify droplet SSH & dependencies
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "echo SSH OK; docker --version; docker-compose --version; git --version"

      - name: Transfer package files to droplet
        run: |
          PKG_DIR=/opt/typst-bot/cache/${{ env.PACKAGE_NAMESPACE }}/${{ env.PACKAGE_NAME }}
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${{ secrets.DROPLET_IP }} "rm -rf $PKG_DIR; mkdir -p $PKG_DIR"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" package-repo/ ${SSH_USER}@${{ secrets.DROPLET_IP }}:$PKG_DIR/

      - name: Deploy on droplet
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} <<EOF
            set -euo pipefail
            cd /opt/typst-bot

            docker-compose -f docker-compose.http.yml pull
            docker-compose -f docker-compose.http.yml up -d --remove-orphans
          EOF