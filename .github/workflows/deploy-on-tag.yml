name: Deploy on Tag

# Runs whenever you push a Git tag (e.g. v1.2.3 or 1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAMESPACE: premiertutors
      PACKAGE_NAME: 2_typst
      # Authenticated URL for your private package (including REPO_PAT)
      REPO_URL: https://x-access-token:${{ secrets.REPO_PAT }}@github.com/premiertutors/2_typst.git
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      IMAGE_TAG: ${{ github.ref_name }}
      # SSH settings for deploy
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Find latest package tag
        id: find_tag
        run: |
          echo "🔍 Finding latest package tag…"
          # Use authenticated REPO_URL to list tags for private repo
          LATEST=$(git ls-remote --tags "${{ env.REPO_URL }}" \
            | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
            | grep -E '^[0-9]+' \
            | sort -V \
            | tail -n1)
          if [ -z "$LATEST" ]; then
            echo "❌ No valid tags found"
            exit 1
          fi
          echo "✅ Latest package tag is: $LATEST"
          echo "LATEST_TAG=$LATEST" >> $GITHUB_ENV

      - name: Build & push HTTP-server
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.http
          push: true
          tags: ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ env.IMAGE_TAG }}

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Verify droplet SSH & dependencies
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "echo SSH OK; docker --version; docker-compose --version; git --version"

      - name: Deploy via GitHub API tarball
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} <<EOF
            set -euo pipefail
            cd /opt/typst-bot

            PKG_DIR=cache/${{ env.PACKAGE_NAMESPACE }}/${{ env.PACKAGE_NAME }}
            rm -rf "\$PKG_DIR"
            mkdir -p "\$PKG_DIR"

            echo "📦 Downloading tarball for $LATEST_TAG"
            curl -sSfL \
              -H "Authorization: token ${{ secrets.REPO_PAT }}" \
              https://api.github.com/repos/${{ env.PACKAGE_NAMESPACE }}/${{ env.PACKAGE_NAME }}/tarball/$LATEST_TAG \
            | tar xz --strip-components=1 -C "\$PKG_DIR"

            docker-compose -f docker-compose.http.yml pull
            docker-compose -f docker-compose.http.yml up -d --remove-orphans
          EOF
