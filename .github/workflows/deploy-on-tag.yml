name: Deploy Typst Bot

permissions:
  contents: read         # read repo contents
  packages: write        # write access to GHCR
  actions: read          # read workflow metadata

# Runs whenever you push a Git tag (e.g. v1.2.3 or 1.2.3) or manually
on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        default: 'latest_tag'
        type: choice
        options:
          - 'latest_tag'
          - 'specific_tag'
          - 'specific_branch'
      package_reference:
        description: 'Package tag/branch to deploy (only used if not "latest_tag")'
        required: false
        default: 'main'
        type: string
      image_tag_suffix:
        description: 'Custom suffix for Docker image tag (optional)'
        required: false
        default: ''
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAMESPACE: premiertutors
      PACKAGE_NAME: 2_typst
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      # Set IMAGE_TAG based on trigger type
      IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || (inputs.image_tag_suffix != '' && format('manual-{0}', inputs.image_tag_suffix) || format('manual-{0}', github.run_number)) }}
      # SSH settings for deploy
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}
      # Deployment configuration
      DEPLOYMENT_MODE: ${{ github.event_name == 'push' && 'latest_tag' || inputs.deployment_mode }}
      PACKAGE_REFERENCE: ${{ inputs.package_reference || '' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Test GHCR write access
        run: |
          echo "FROM scratch" > Dockerfile.test
          docker build -f Dockerfile.test -t ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:access-test .
          docker push ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:access-test
          rm Dockerfile.test

      - name: Verify GHCR access
        run: |
          echo "🔍 Verifying GHCR access..."
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          
          # Test basic access to GHCR
          echo "Testing GHCR connectivity..."
          docker pull hello-world || echo "Basic Docker test completed"
          
          # Check if package exists
          echo "Checking if package exists..."
          if docker manifest inspect ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
            echo "✅ Package exists and is accessible"
          else
            echo "ℹ️ Package doesn't exist yet or no latest tag - this is normal for first push"
          fi

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: |
            ${{ secrets.REPO_B_SSH_KEY }}
            ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Add known hosts for GitHub
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Determine package reference
        id: determine_ref
        run: |
          echo "🔍 Determining package reference to deploy..."
          echo "Deployment mode: ${{ env.DEPLOYMENT_MODE }}"
          
          case "${{ env.DEPLOYMENT_MODE }}" in
            "latest_tag")
              echo "Finding latest package tag..."
              # Use SSH URL to list tags for private repo
              LATEST=$(git ls-remote --tags git@github.com:premiertutors/2_typst.git \
                | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
                | grep -E '^[0-9]+' \
                | sort -V \
                | tail -n1)
              if [ -z "$LATEST" ]; then
                echo "❌ No valid tags found"
                exit 1
              fi
              echo "✅ Latest package tag is: $LATEST"
              echo "package_ref=$LATEST" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
              ;;
            "specific_tag")
              echo "Using specific tag: ${{ env.PACKAGE_REFERENCE }}"
              # Verify the tag exists
              if git ls-remote --tags git@github.com:premiertutors/2_typst.git | grep -q "refs/tags/${{ env.PACKAGE_REFERENCE }}$"; then
                echo "✅ Tag ${{ env.PACKAGE_REFERENCE }} exists"
                echo "package_ref=${{ env.PACKAGE_REFERENCE }}" >> $GITHUB_OUTPUT
                echo "ref_type=tag" >> $GITHUB_OUTPUT
              else
                echo "❌ Tag ${{ env.PACKAGE_REFERENCE }} not found"
                exit 1
              fi
              ;;
            "specific_branch")
              echo "Using specific branch: ${{ env.PACKAGE_REFERENCE }}"
              # Verify the branch exists
              if git ls-remote --heads git@github.com:premiertutors/2_typst.git | grep -q "refs/heads/${{ env.PACKAGE_REFERENCE }}$"; then
                echo "✅ Branch ${{ env.PACKAGE_REFERENCE }} exists"
                echo "package_ref=${{ env.PACKAGE_REFERENCE }}" >> $GITHUB_OUTPUT
                echo "ref_type=branch" >> $GITHUB_OUTPUT
              else
                echo "❌ Branch ${{ env.PACKAGE_REFERENCE }} not found"
                exit 1
              fi
              ;;
            *)
              echo "❌ Unknown deployment mode: ${{ env.DEPLOYMENT_MODE }}"
              exit 1
              ;;
          esac

      - name: Display deployment info
        run: |
          echo "🚀 Deployment Information:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Trigger: ${{ github.event_name }}"
          echo "Deployment mode: ${{ env.DEPLOYMENT_MODE }}"
          echo "Package reference: ${{ steps.determine_ref.outputs.package_ref }} (${{ steps.determine_ref.outputs.ref_type }})"
          echo "Docker image tag: ${{ env.IMAGE_TAG }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Clone and checkout package repo
        run: |
          echo "🔄 Cloning package repository..."
          git clone git@github.com:premiertutors/2_typst.git package-repo
          cd package-repo
          
          echo "📋 Checking out ${{ steps.determine_ref.outputs.ref_type }}: ${{ steps.determine_ref.outputs.package_ref }}"
          git checkout ${{ steps.determine_ref.outputs.package_ref }}
          
          # Show what we checked out
          echo "✅ Successfully checked out:"
          git log -1 --oneline
          echo "Current branch/tag: $(git describe --all --exact-match HEAD 2>/dev/null || git rev-parse --short HEAD)"

      - name: Build & push HTTP-server
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "🔨 Building Docker image..."
          IMAGE_TAG="ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ env.IMAGE_TAG }}"
          echo "Image tag: $IMAGE_TAG"
          
          # Build the image
          docker build -f Dockerfile.http -t "$IMAGE_TAG" .
          
          # Push the image
          echo "📤 Pushing to GHCR..."
          docker push "$IMAGE_TAG"
          
          echo "✅ Successfully pushed $IMAGE_TAG"

      - name: Verify droplet SSH & dependencies
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "echo SSH OK; docker --version; docker-compose --version; git --version"

      - name: Transfer package files to droplet
        run: |
          PKG_DIR=/opt/typst-bot/cache/${{ env.PACKAGE_NAMESPACE }}/${{ env.PACKAGE_NAME }}
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${{ secrets.DROPLET_IP }} "rm -rf $PKG_DIR; mkdir -p $PKG_DIR"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" package-repo/ ${SSH_USER}@${{ secrets.DROPLET_IP }}:$PKG_DIR/

      - name: Deploy on droplet
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} <<EOF
            set -euo pipefail
            cd /opt/typst-bot

            docker-compose -f docker-compose.http.yml pull
            docker-compose -f docker-compose.http.yml up -d --remove-orphans
          EOF