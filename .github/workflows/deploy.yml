name: Deploy

# This workflow builds and deploys the Typst bot with multiple package repositories.
# 
# To add a new package repository:
# 1. Add it to PACKAGE_MAPPINGS in the format "repo_name:package_name"
# 2. Ensure the GitHub App has access to the repository
# 3. The repository should contain a typst.toml file with version information
#
# Example: "2_typst:content,my_typst_package:my_package"

permissions:
  contents: read         # read repo contents
  packages: write        # write access to GHCR
  actions: read          # read workflow metadata

# Runs automatically on tag push, repository dispatch from 2_typst releases, or manually
on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
  repository_dispatch:
    types: [deploy-release]
  workflow_dispatch:
    inputs:
      package_ref:
        description: 'Package repository branch/tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse_mappings.outputs.matrix }}
      repositories: ${{ steps.parse_mappings.outputs.repositories }}
    env:
      # Package name mappings (repo_name:package_name)
      # Add new packages here in the format: "repo1:package1,repo2:package2"
      PACKAGE_MAPPINGS: "2_typst:content"
    steps:
      - name: Parse package mappings
        id: parse_mappings
        run: |
          echo "üîç Parsing package mappings..."
          
          # Convert comma-separated mappings to JSON matrix
          MAPPINGS_JSON="["
          REPOS_LIST=""
          IFS=',' read -ra MAPPINGS <<< "${{ env.PACKAGE_MAPPINGS }}"
          for i in "${!MAPPINGS[@]}"; do
            mapping="${MAPPINGS[$i]}"
            IFS=':' read -ra PAIR <<< "$mapping"
            repo_name="${PAIR[0]}"
            package_name="${PAIR[1]}"
            
            if [ $i -gt 0 ]; then
              MAPPINGS_JSON="$MAPPINGS_JSON,"
              REPOS_LIST="$REPOS_LIST,"
            fi
            MAPPINGS_JSON="$MAPPINGS_JSON{\"repo_name\":\"$repo_name\",\"package_name\":\"$package_name\",\"repo_full\":\"premiertutors/$repo_name\"}"
            REPOS_LIST="$REPOS_LIST$repo_name"
          done
          MAPPINGS_JSON="$MAPPINGS_JSON]"
          
          echo "Generated matrix: $MAPPINGS_JSON"
          echo "Repositories list: $REPOS_LIST"
          echo "matrix=$MAPPINGS_JSON" >> $GITHUB_OUTPUT
          echo "repositories=$REPOS_LIST" >> $GITHUB_OUTPUT
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_info.outputs.image_tag }}
    env:
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set image tag
        id: image_info
        run: |
          # Set IMAGE_TAG based on trigger type
          IMAGE_TAG="${{ github.event_name == 'push' && github.ref_name || format('manual-{0}', github.run_number) }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image tag will be: $IMAGE_TAG"

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push HTTP-server
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "üî® Building Docker image..."
          IMAGE_TAG="ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ steps.image_info.outputs.image_tag }}"
          echo "Image tag: $IMAGE_TAG"
          
          # Build the image
          docker build -f Dockerfile.http -t "$IMAGE_TAG" .
          
          # Push the image
          echo "üì§ Pushing to GHCR..."
          docker push "$IMAGE_TAG"
          
          echo "‚úÖ Successfully pushed $IMAGE_TAG"

  deploy:
    needs: [setup, build-image]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    env:
      # Package namespace (always pt for premiertutors)
      PACKAGE_NAMESPACE: pt
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      # SSH settings for deploy
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup SSH agent for droplet access
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Verify droplet SSH & dependencies (early check)
        run: |
          echo "üîå Testing SSH connection to droplet..."
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "echo 'SSH OK'; docker --version; docker-compose --version; git --version"

      - name: Generate GitHub App token for package repo access
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEPLOY_APP_ID }}
          private-key: ${{ secrets.DEPLOY_APP_PRIVATE_KEY }}
          owner: premiertutors
          repositories: ${{ needs.setup.outputs.repositories }}

      - name: Set package information
        id: package_mapping
        run: |
          echo "üîç Setting package information from matrix..."
          
          PACKAGE_REPO="${{ matrix.repo_full }}"
          PACKAGE_NAMESPACE="${{ env.PACKAGE_NAMESPACE }}"
          PACKAGE_NAME="${{ matrix.package_name }}"
          
          echo "‚úÖ Package information:"
          echo "  Repository: $PACKAGE_REPO"
          echo "  Namespace: $PACKAGE_NAMESPACE"
          echo "  Package Name: $PACKAGE_NAME"
          
          # Set outputs for use in later steps
          echo "package_repo=$PACKAGE_REPO" >> $GITHUB_OUTPUT
          echo "package_namespace=$PACKAGE_NAMESPACE" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine package reference
        id: determine_ref
        run: |
          echo "üîç Determining package reference to deploy..."
          PACKAGE_REPO="${{ steps.package_mapping.outputs.package_repo }}"
          
          # Try git access first (requires Contents: Read permission)
          REPO_URL_1="https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${PACKAGE_REPO}.git"
          if git ls-remote --heads "$REPO_URL_1" >/dev/null 2>&1; then
            echo "‚úÖ Using git operations"
            REPO_URL="$REPO_URL_1"
            USE_GIT=true
          else
            echo "üîÑ Using GitHub API (git access unavailable)"
            USE_GIT=false
          fi
          
          if [ "${{ github.event_name }}" = "push" ]; then
            # For tag pushes, find the latest tag from the package repo
            echo "Tag push detected, finding latest package tag..."
            if [ "$USE_GIT" = "true" ]; then
              LATEST=$(git ls-remote --tags "$REPO_URL" \
                | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
                | grep -E '^[0-9]+' \
                | sort -V \
                | tail -n1)
            else
              # Use GitHub API to get tags
              LATEST=$(curl -s -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${PACKAGE_REPO}/tags" \
                | python3 -c "import sys, json, re; data = json.load(sys.stdin); tags = [tag['name'] for tag in data if re.match(r'^[0-9]+', tag['name'])] if isinstance(data, list) else []; print(sorted(tags)[-1] if tags else '')" 2>/dev/null || echo "")
            fi
            
            if [ -z "$LATEST" ]; then
              echo "‚ùå No valid tags found in package repository"
              exit 1
            fi
            echo "‚úÖ Latest package tag is: $LATEST"
            echo "package_ref=$LATEST" >> $GITHUB_OUTPUT
            echo "ref_type=tag" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # For repository dispatch from 2_typst releases, use the tag from the payload
            RELEASE_TAG="${{ github.event.client_payload.tag_name }}"
            echo "Repository dispatch detected, release tag: $RELEASE_TAG"
            
            # Verify the tag exists in the package repo
            if [ "$USE_GIT" = "true" ]; then
              TAG_EXISTS=$(git ls-remote --tags "$REPO_URL" | grep -q "refs/tags/$RELEASE_TAG$" && echo "true" || echo "false")
            else
              # Use GitHub API to check if tag exists
              TAG_EXISTS=$(curl -s -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${PACKAGE_REPO}/git/ref/tags/${RELEASE_TAG}" \
                | python3 -c "import sys, json; data = json.load(sys.stdin); print('true' if 'ref' in data else 'false')")
            fi
            
            if [ "$TAG_EXISTS" = "true" ]; then
              echo "‚úÖ Found release tag in package repository: $RELEASE_TAG"
              echo "package_ref=$RELEASE_TAG" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Release tag '$RELEASE_TAG' not found in package repository"
              exit 1
            fi
          else
            # For manual dispatch, use the package_ref input
            PACKAGE_REF="${{ inputs.package_ref }}"
            echo "Manual dispatch detected, package reference: $PACKAGE_REF"
            
            if [ "$PACKAGE_REF" = "latest" ] || [ -z "$PACKAGE_REF" ]; then
              # Find latest tag (same as automatic mode)
              echo "Finding latest package tag..."
              if [ "$USE_GIT" = "true" ]; then
                LATEST=$(git ls-remote --tags "$REPO_URL" \
                  | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
                  | grep -E '^[0-9]+' \
                  | sort -V \
                  | tail -n1)
              else
                # Use GitHub API to get tags
                LATEST=$(curl -s -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${PACKAGE_REPO}/tags" \
                  | python3 -c "import sys, json, re; data = json.load(sys.stdin); tags = [tag['name'] for tag in data if re.match(r'^[0-9]+', tag['name'])] if isinstance(data, list) else []; print(sorted(tags)[-1] if tags else '')" 2>/dev/null || echo "")
              fi
              
              if [ -z "$LATEST" ]; then
                echo "‚ùå No valid tags found in package repository"
                exit 1
              fi
              echo "‚úÖ Latest package tag is: $LATEST"
              echo "package_ref=$LATEST" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
            else
              # Check if specified ref exists in package repo (simplified for API)
              echo "Using specified reference: $PACKAGE_REF"
              echo "package_ref=$PACKAGE_REF" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Store the access method for later use
          echo "use_git=$USE_GIT" >> $GITHUB_OUTPUT

      - name: Display deployment info
        run: |
          echo "üöÄ Deployment Information:"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Triggered by tag: ${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Triggered by ${{ matrix.repo_name }} release: ${{ github.event.client_payload.tag_name }}"
            echo "Release URL: ${{ github.event.client_payload.release_url }}"
          else
            echo "Manual dispatch from: ${{ github.ref_name }}"
            echo "Package reference requested: ${{ inputs.package_ref }}"
          fi
          echo "Package repository: ${{ steps.package_mapping.outputs.package_repo }}"
          echo "Package namespace: ${{ steps.package_mapping.outputs.package_namespace }}"
          echo "Package name: ${{ steps.package_mapping.outputs.package_name }}"
          echo "Package reference to deploy: ${{ steps.determine_ref.outputs.package_ref }} (${{ steps.determine_ref.outputs.ref_type }})"
          echo "Docker image tag: ${{ needs.build-image.outputs.image_tag }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      - name: Clone and checkout package repo
        run: |
          echo "üîÑ Getting package repository..."
          PACKAGE_REPO="${{ steps.package_mapping.outputs.package_repo }}"
          USE_GIT="${{ steps.determine_ref.outputs.use_git }}"
          
          if [ "$USE_GIT" = "true" ]; then
            echo "Cloning via git..."
            REPO_URL="https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${PACKAGE_REPO}.git"
            git clone "$REPO_URL" package-repo
            cd package-repo
            git checkout ${{ steps.determine_ref.outputs.package_ref }}
            echo "‚úÖ Checked out ${{ steps.determine_ref.outputs.ref_type }}: ${{ steps.determine_ref.outputs.package_ref }}"
          else
            echo "Downloading via API..."
            PACKAGE_REF="${{ steps.determine_ref.outputs.package_ref }}"
            mkdir -p package-repo && cd package-repo
            
            curl -L -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
              "https://api.github.com/repos/${PACKAGE_REPO}/zipball/${PACKAGE_REF}" \
              -o archive.zip
            
            unzip -q archive.zip
            EXTRACTED_DIR=$(unzip -l archive.zip | head -4 | tail -1 | awk '{print $4}' | cut -d'/' -f1)
            mv "$EXTRACTED_DIR"/* ./ 2>/dev/null || true
            mv "$EXTRACTED_DIR"/.[!.]* ./ 2>/dev/null || true
            rmdir "$EXTRACTED_DIR" 2>/dev/null || true
            rm archive.zip
            
            echo "‚úÖ Downloaded ${{ steps.determine_ref.outputs.ref_type }}: $PACKAGE_REF"
          fi

      - name: Transfer package files to droplet
        run: |
          # Extract version from the package's typst.toml file
          PACKAGE_VERSION=$(grep '^version = ' package-repo/typst.toml | sed 's/version = "\(.*\)"/\1/')
          echo "üì¶ Extracted package version: $PACKAGE_VERSION"
          
          PKG_DIR=/opt/typst-bot/cache/${{ steps.package_mapping.outputs.package_namespace }}/${{ steps.package_mapping.outputs.package_name }}/$PACKAGE_VERSION
          echo "üéØ Target directory: $PKG_DIR"
          
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${{ secrets.DROPLET_IP }} "rm -rf $PKG_DIR; mkdir -p $PKG_DIR"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" package-repo/ ${SSH_USER}@${{ secrets.DROPLET_IP }}:$PKG_DIR/

  update-deployment:
    needs: [build-image, deploy]
    runs-on: ubuntu-latest
    env:
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}
    steps:
      - name: Setup SSH agent for droplet access
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Deploy on droplet
        env:
          IMAGE_TAG_TO_DEPLOY: "ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ needs.build-image.outputs.image_tag }}"
        run: |
          echo "Deploying image: $IMAGE_TAG_TO_DEPLOY"
          
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "cd /opt/typst-bot && \
             echo 'Stopping and removing existing containers...' && \
             docker-compose -f docker-compose.http.yml down || true && \
             sed -i 's|image: ghcr.io/premiertutors/typst-bot:http-server-.*|image: $IMAGE_TAG_TO_DEPLOY|' docker-compose.http.yml && \
             echo 'Updated docker-compose.yml:' && \
             grep 'image:' docker-compose.http.yml && \
             docker-compose -f docker-compose.http.yml pull && \
             docker-compose -f docker-compose.http.yml up -d --remove-orphans"