name: Deploy

permissions:
  contents: read         # read repo contents
  packages: write        # write access to GHCR
  actions: read          # read workflow metadata

# Runs automatically on tag push, repository dispatch from 2_typst releases, or manually
on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
  repository_dispatch:
    types: [deploy-release]
  workflow_dispatch:
    inputs:
      package_ref:
        description: 'Package repository branch/tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Default package repo for automatic deployments
      DEFAULT_PACKAGE_REPO: premiertutors/2_typst
      # Package name mappings (repo_name:package_name)
      PACKAGE_MAPPINGS: "2_typst:content,some-other-repo:some_other_repo"
      # Docker registry settings
      GHCR_USER: premiertutors
      IMAGE_NAME: typst-bot
      # Set IMAGE_TAG based on trigger type
      IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || format('manual-{0}', github.run_number) }}
      # SSH settings for deploy
      SSH_USER: root
      DROPLET_IP: ${{ secrets.DROPLET_IP }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Generate GitHub App token for 2_typst access
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEPLOY_APP_ID }}
          private-key: ${{ secrets.DEPLOY_APP_PRIVATE_KEY }}
          owner: premiertutors
          repositories: 2_typst

      - name: Determine package repository and mapping
        id: package_mapping
        run: |
          echo "🔍 Determining package repository and package name mapping..."
          
          # Always use the default package repo (hardcoded)
          PACKAGE_REPO="${{ env.DEFAULT_PACKAGE_REPO }}"
          echo "Using package repo: $PACKAGE_REPO"
          
          # Extract repo name from full repo path (premiertutors/repo_name -> repo_name)
          REPO_NAME=$(echo "$PACKAGE_REPO" | cut -d'/' -f2)
          
          # Always map premiertutors to pt namespace
          PACKAGE_NAMESPACE="pt"
          
          # Find package name from mappings
          PACKAGE_NAME=""
          IFS=',' read -ra MAPPINGS <<< "${{ env.PACKAGE_MAPPINGS }}"
          for mapping in "${MAPPINGS[@]}"; do
            IFS=':' read -ra PAIR <<< "$mapping"
            if [ "${PAIR[0]}" = "$REPO_NAME" ]; then
              PACKAGE_NAME="${PAIR[1]}"
              break
            fi
          done
          
          # Check if mapping was found
          if [ -z "$PACKAGE_NAME" ]; then
            echo "❌ Unknown repository: $REPO_NAME"
            echo "Please add a mapping for this repository in PACKAGE_MAPPINGS."
            echo "Available mappings: ${{ env.PACKAGE_MAPPINGS }}"
            exit 1
          fi
          
          echo "✅ Package mapping resolved:"
          echo "  Repository: $PACKAGE_REPO"
          echo "  Namespace: $PACKAGE_NAMESPACE"
          echo "  Package Name: $PACKAGE_NAME"
          
          # Set outputs for use in later steps
          echo "package_repo=$PACKAGE_REPO" >> $GITHUB_OUTPUT
          echo "package_namespace=$PACKAGE_NAMESPACE" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine package reference
        id: determine_ref
        run: |
          echo "🔍 Determining package reference to deploy..."
          PACKAGE_REPO="${{ steps.package_mapping.outputs.package_repo }}"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            # For tag pushes, find the latest tag from the package repo (ORIGINAL WORKING LOGIC)
            echo "Tag push detected, finding latest package tag..."
            LATEST=$(git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git \
              | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
              | grep -E '^[0-9]+' \
              | sort -V \
              | tail -n1)
            if [ -z "$LATEST" ]; then
              echo "❌ No valid tags found in package repository"
              exit 1
            fi
            echo "✅ Latest package tag is: $LATEST"
            echo "package_ref=$LATEST" >> $GITHUB_OUTPUT
            echo "ref_type=tag" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # For repository dispatch from 2_typst releases, use the tag from the payload
            RELEASE_TAG="${{ github.event.client_payload.tag_name }}"
            echo "Repository dispatch detected, release tag: $RELEASE_TAG"
            
            # Verify the tag exists in the package repo
            if git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | grep -q "refs/tags/$RELEASE_TAG$"; then
              echo "✅ Found release tag in package repository: $RELEASE_TAG"
              echo "package_ref=$RELEASE_TAG" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
            else
              echo "❌ Release tag '$RELEASE_TAG' not found in package repository"
              echo "Available tags:"
              git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | awk -F/ '{print "  " $3}' | head -10
              exit 1
            fi
          else
            # For manual dispatch, use the package_ref input
            PACKAGE_REF="${{ inputs.package_ref }}"
            echo "Manual dispatch detected, package reference: $PACKAGE_REF"
            
            if [ "$PACKAGE_REF" = "latest" ] || [ -z "$PACKAGE_REF" ]; then
              # Find latest tag (same as automatic mode)
              echo "Finding latest package tag..."
              LATEST=$(git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git \
                | awk -F/ '{ tag=$3; sub(/\^\{\}$/,"",tag); print tag }' \
                | grep -E '^[0-9]+' \
                | sort -V \
                | tail -n1)
              if [ -z "$LATEST" ]; then
                echo "❌ No valid tags found in package repository"
                exit 1
              fi
              echo "✅ Latest package tag is: $LATEST"
              echo "package_ref=$LATEST" >> $GITHUB_OUTPUT
              echo "ref_type=tag" >> $GITHUB_OUTPUT
            else
              # Check if specified ref exists in package repo
              if git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | grep -q "refs/tags/$PACKAGE_REF$"; then
                echo "✅ Found as tag in package repository: $PACKAGE_REF"
                echo "package_ref=$PACKAGE_REF" >> $GITHUB_OUTPUT
                echo "ref_type=tag" >> $GITHUB_OUTPUT
              elif git ls-remote --heads https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | grep -q "refs/heads/$PACKAGE_REF$"; then
                echo "✅ Found as branch in package repository: $PACKAGE_REF"
                echo "package_ref=$PACKAGE_REF" >> $GITHUB_OUTPUT
                echo "ref_type=branch" >> $GITHUB_OUTPUT
              else
                echo "❌ Reference '$PACKAGE_REF' not found in package repository"
                echo "Available branches:"
                git ls-remote --heads https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | awk -F/ '{print "  " $3}'
                echo "Available tags:"
                git ls-remote --tags https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git | awk -F/ '{print "  " $3}' | head -10
                exit 1
              fi
            fi
          fi

      - name: Display deployment info
        run: |
          echo "🚀 Deployment Information:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Triggered by tag: ${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Triggered by 2_typst release: ${{ github.event.client_payload.tag_name }}"
            echo "Release URL: ${{ github.event.client_payload.release_url }}"
          else
            echo "Manual dispatch from: ${{ github.ref_name }}"
            echo "Package reference requested: ${{ inputs.package_ref }}"
          fi
          echo "Package repository: ${{ steps.package_mapping.outputs.package_repo }}"
          echo "Package namespace: ${{ steps.package_mapping.outputs.package_namespace }}"
          echo "Package name: ${{ steps.package_mapping.outputs.package_name }}"
          echo "Package reference to deploy: ${{ steps.determine_ref.outputs.package_ref }} (${{ steps.determine_ref.outputs.ref_type }})"
          echo "Docker image tag: ${{ env.IMAGE_TAG }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Clone and checkout package repo
        run: |
          echo "🔄 Cloning package repository..."
          PACKAGE_REPO="${{ steps.package_mapping.outputs.package_repo }}"
          git clone https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$PACKAGE_REPO.git package-repo
          cd package-repo
          
          echo "📋 Checking out ${{ steps.determine_ref.outputs.ref_type }}: ${{ steps.determine_ref.outputs.package_ref }}"
          git checkout ${{ steps.determine_ref.outputs.package_ref }}
          
          # Show what we checked out
          echo "✅ Successfully checked out:"
          git log -1 --oneline
          echo "Current branch/tag: $(git describe --all --exact-match HEAD 2>/dev/null || git rev-parse --short HEAD)"

      - name: Build & push HTTP-server
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "🔨 Building Docker image..."
          IMAGE_TAG="ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ env.IMAGE_TAG }}"
          echo "Image tag: $IMAGE_TAG"
          
          # Build the image
          docker build -f Dockerfile.http -t "$IMAGE_TAG" .
          
          # Push the image
          echo "📤 Pushing to GHCR..."
          docker push "$IMAGE_TAG"
          
          echo "✅ Successfully pushed $IMAGE_TAG"

      - name: Verify droplet SSH & dependencies
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "echo SSH OK; docker --version; docker-compose --version; git --version"

      - name: Transfer package files to droplet
        run: |
          # Extract version from the package's typst.toml file
          PACKAGE_VERSION=$(grep '^version = ' package-repo/typst.toml | sed 's/version = "\(.*\)"/\1/')
          echo "📦 Extracted package version: $PACKAGE_VERSION"
          
          PKG_DIR=/opt/typst-bot/cache/${{ steps.package_mapping.outputs.package_namespace }}/${{ steps.package_mapping.outputs.package_name }}/$PACKAGE_VERSION
          echo "🎯 Target directory: $PKG_DIR"
          
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${{ secrets.DROPLET_IP }} "rm -rf $PKG_DIR; mkdir -p $PKG_DIR"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" package-repo/ ${SSH_USER}@${{ secrets.DROPLET_IP }}:$PKG_DIR/

      - name: Deploy on droplet
        env:
          IMAGE_TAG_TO_DEPLOY: "ghcr.io/${{ env.GHCR_USER }}/${{ env.IMAGE_NAME }}:http-server-${{ env.IMAGE_TAG }}"
        run: |
          echo "Deploying image: $IMAGE_TAG_TO_DEPLOY"
          
          ssh -o StrictHostKeyChecking=no \
            ${SSH_USER}@${{ secrets.DROPLET_IP }} \
            "cd /opt/typst-bot && \
             echo 'Stopping and removing existing containers...' && \
             docker-compose -f docker-compose.http.yml down || true && \
             sed -i 's|image: ghcr.io/premiertutors/typst-bot:http-server-.*|image: $IMAGE_TAG_TO_DEPLOY|' docker-compose.http.yml && \
             echo 'Updated docker-compose.yml:' && \
             grep 'image:' docker-compose.http.yml && \
             docker-compose -f docker-compose.http.yml pull && \
             docker-compose -f docker-compose.http.yml up -d --remove-orphans"